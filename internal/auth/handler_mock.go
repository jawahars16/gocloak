// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source handler.go -destination handler_mock.go -package auth
//
// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockuserManager is a mock of userManager interface.
type MockuserManager struct {
	ctrl     *gomock.Controller
	recorder *MockuserManagerMockRecorder
}

// MockuserManagerMockRecorder is the mock recorder for MockuserManager.
type MockuserManagerMockRecorder struct {
	mock *MockuserManager
}

// NewMockuserManager creates a new mock instance.
func NewMockuserManager(ctrl *gomock.Controller) *MockuserManager {
	mock := &MockuserManager{ctrl: ctrl}
	mock.recorder = &MockuserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserManager) EXPECT() *MockuserManagerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockuserManager) GenerateToken(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockuserManagerMockRecorder) GenerateToken(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockuserManager)(nil).GenerateToken), email, password)
}
