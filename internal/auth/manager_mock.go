// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source manager.go -destination manager_mock.go -package auth
//
// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MocktokenGenerator is a mock of tokenGenerator interface.
type MocktokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocktokenGeneratorMockRecorder
}

// MocktokenGeneratorMockRecorder is the mock recorder for MocktokenGenerator.
type MocktokenGeneratorMockRecorder struct {
	mock *MocktokenGenerator
}

// NewMocktokenGenerator creates a new mock instance.
func NewMocktokenGenerator(ctrl *gomock.Controller) *MocktokenGenerator {
	mock := &MocktokenGenerator{ctrl: ctrl}
	mock.recorder = &MocktokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenGenerator) EXPECT() *MocktokenGeneratorMockRecorder {
	return m.recorder
}

// NewWithClaims mocks base method.
func (m *MocktokenGenerator) NewWithClaims(method jwt.SigningMethod, claims jwt.Claims, opts ...jwt.TokenOption) *jwt.Token {
	m.ctrl.T.Helper()
	varargs := []any{method, claims}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewWithClaims", varargs...)
	ret0, _ := ret[0].(*jwt.Token)
	return ret0
}

// NewWithClaims indicates an expected call of NewWithClaims.
func (mr *MocktokenGeneratorMockRecorder) NewWithClaims(method, claims any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method, claims}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithClaims", reflect.TypeOf((*MocktokenGenerator)(nil).NewWithClaims), varargs...)
}

// Mockvalidator is a mock of validator interface.
type Mockvalidator struct {
	ctrl     *gomock.Controller
	recorder *MockvalidatorMockRecorder
}

// MockvalidatorMockRecorder is the mock recorder for Mockvalidator.
type MockvalidatorMockRecorder struct {
	mock *Mockvalidator
}

// NewMockvalidator creates a new mock instance.
func NewMockvalidator(ctrl *gomock.Controller) *Mockvalidator {
	mock := &Mockvalidator{ctrl: ctrl}
	mock.recorder = &MockvalidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockvalidator) EXPECT() *MockvalidatorMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *Mockvalidator) CompareHashAndPassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockvalidatorMockRecorder) CompareHashAndPassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*Mockvalidator)(nil).CompareHashAndPassword), hashedPassword, password)
}

// Mockdb is a mock of db interface.
type Mockdb struct {
	ctrl     *gomock.Controller
	recorder *MockdbMockRecorder
}

// MockdbMockRecorder is the mock recorder for Mockdb.
type MockdbMockRecorder struct {
	mock *Mockdb
}

// NewMockdb creates a new mock instance.
func NewMockdb(ctrl *gomock.Controller) *Mockdb {
	mock := &Mockdb{ctrl: ctrl}
	mock.recorder = &MockdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdb) EXPECT() *MockdbMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *Mockdb) First(dest any, conds ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockdbMockRecorder) First(dest any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*Mockdb)(nil).First), varargs...)
}
