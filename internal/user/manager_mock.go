// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source manager.go -destination manager_mock.go -package user
//
// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockcrypto is a mock of crypto interface.
type Mockcrypto struct {
	ctrl     *gomock.Controller
	recorder *MockcryptoMockRecorder
}

// MockcryptoMockRecorder is the mock recorder for Mockcrypto.
type MockcryptoMockRecorder struct {
	mock *Mockcrypto
}

// NewMockcrypto creates a new mock instance.
func NewMockcrypto(ctrl *gomock.Controller) *Mockcrypto {
	mock := &Mockcrypto{ctrl: ctrl}
	mock.recorder = &MockcryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcrypto) EXPECT() *MockcryptoMockRecorder {
	return m.recorder
}

// GenerateFromPassword mocks base method.
func (m *Mockcrypto) GenerateFromPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockcryptoMockRecorder) GenerateFromPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*Mockcrypto)(nil).GenerateFromPassword), password)
}

// Mockdb is a mock of db interface.
type Mockdb struct {
	ctrl     *gomock.Controller
	recorder *MockdbMockRecorder
}

// MockdbMockRecorder is the mock recorder for Mockdb.
type MockdbMockRecorder struct {
	mock *Mockdb
}

// NewMockdb creates a new mock instance.
func NewMockdb(ctrl *gomock.Controller) *Mockdb {
	mock := &Mockdb{ctrl: ctrl}
	mock.recorder = &MockdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdb) EXPECT() *MockdbMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *Mockdb) Save(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockdbMockRecorder) Save(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockdb)(nil).Save), data)
}
