// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source handler.go -destination handler_mock.go -package user
//
// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockuserManager is a mock of userManager interface.
type MockuserManager struct {
	ctrl     *gomock.Controller
	recorder *MockuserManagerMockRecorder
}

// MockuserManagerMockRecorder is the mock recorder for MockuserManager.
type MockuserManagerMockRecorder struct {
	mock *MockuserManager
}

// NewMockuserManager creates a new mock instance.
func NewMockuserManager(ctrl *gomock.Controller) *MockuserManager {
	mock := &MockuserManager{ctrl: ctrl}
	mock.recorder = &MockuserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserManager) EXPECT() *MockuserManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockuserManager) Add(user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockuserManagerMockRecorder) Add(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockuserManager)(nil).Add), user)
}
